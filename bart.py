# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bart', [dirname(__file__)])
        except ImportError:
            import _bart
            return _bart
        if fp is not None:
            try:
                _mod = imp.load_module('_bart', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bart = swig_import_helper()
    del swig_import_helper
else:
    import _bart
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class compute_bart(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, compute_bart, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, compute_bart, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _bart.new_compute_bart()
        try:
            self.this.append(this)
        except:
            self.this = this

    def set_insample_matrix(self, n):
        return _bart.compute_bart_set_insample_matrix(self, n)

    def set_insample_target(self, n):
        return _bart.compute_bart_set_insample_target(self, n)

    def set_outsample_matrix(self, n):
        return _bart.compute_bart_set_outsample_matrix(self, n)

    def set_outsample_target(self, n):
        return _bart.compute_bart_set_outsample_target(self, n)

    def set_mcmc_params(self, pb_=0.5, alpha_=0.95, beta_=2.0, tau_=1.0, sigma_=1.0):
        return _bart.compute_bart_set_mcmc_params(self, pb_, alpha_, beta_, tau_, sigma_)

    def set_run_params(self, nd_=1000, lambda_=1.0, burn_=100, m_=200, nc_=100, nu_=3.0, kfac_=2.0):
        return _bart.compute_bart_set_run_params(self, nd_, lambda_, burn_, m_, nc_, nu_, kfac_)

    def fit(self):
        return _bart.compute_bart_fit(self)

    def predict(self):
        return _bart.compute_bart_predict(self)
    __swig_setmethods__["insample_data"] = _bart.compute_bart_insample_data_set
    __swig_getmethods__["insample_data"] = _bart.compute_bart_insample_data_get
    if _newclass:
        insample_data = _swig_property(_bart.compute_bart_insample_data_get, _bart.compute_bart_insample_data_set)
    __swig_setmethods__["outsample_data"] = _bart.compute_bart_outsample_data_set
    __swig_getmethods__["outsample_data"] = _bart.compute_bart_outsample_data_get
    if _newclass:
        outsample_data = _swig_property(_bart.compute_bart_outsample_data_get, _bart.compute_bart_outsample_data_set)
    __swig_setmethods__["mcmc_params"] = _bart.compute_bart_mcmc_params_set
    __swig_getmethods__["mcmc_params"] = _bart.compute_bart_mcmc_params_get
    if _newclass:
        mcmc_params = _swig_property(_bart.compute_bart_mcmc_params_get, _bart.compute_bart_mcmc_params_set)
    __swig_setmethods__["run_params"] = _bart.compute_bart_run_params_set
    __swig_getmethods__["run_params"] = _bart.compute_bart_run_params_get
    if _newclass:
        run_params = _swig_property(_bart.compute_bart_run_params_get, _bart.compute_bart_run_params_set)
    __swig_setmethods__["xi"] = _bart.compute_bart_xi_set
    __swig_getmethods__["xi"] = _bart.compute_bart_xi_get
    if _newclass:
        xi = _swig_property(_bart.compute_bart_xi_get, _bart.compute_bart_xi_set)
    __swig_setmethods__["t"] = _bart.compute_bart_t_set
    __swig_getmethods__["t"] = _bart.compute_bart_t_get
    if _newclass:
        t = _swig_property(_bart.compute_bart_t_get, _bart.compute_bart_t_set)
    __swig_destroy__ = _bart.delete_compute_bart
    __del__ = lambda self: None
compute_bart_swigregister = _bart.compute_bart_swigregister
compute_bart_swigregister(compute_bart)

# This file is compatible with both classic and new-style classes.


